import ccxt.async_support as ccxt
import pandas as pd
import requests
import time
import hmac
import hashlib
import json
import asyncio
import nest_asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from config import COINEX_API_KEY, COINEX_API_SECRET, TELEGRAM_TOKEN, CHAT_ID

# Apply nest_asyncio to allow nested event loops
nest_asyncio.apply()

# Set up logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

file_handler = logging.FileHandler('trading_bot.log')
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

logger.handlers.clear()
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# Suppress urllib3 noise
logging.getLogger('urllib3').setLevel(logging.WARNING)

# Trading parameters for all symbols
trading_params = {
    "market_type": "FUTURES",
    "margin_mode": "isolated",
    "leverage": 3
}

# API endpoints
TAKE_PROFIT_URL = "https://api.coinex.com/v2/futures/set-position-take-profit"
STOP_LOSS_URL = "https://api.coinex.com/v2/futures/set-position-stop-loss"

# Global variables
SELECTED_SYMBOLS = []  # Start empty, populated by /set_symbols
last_order_types = {}

# Create a CoinEx client (async version)
exchange = ccxt.coinex({
    'apiKey': COINEX_API_KEY,
    'secret': COINEX_API_SECRET,
    'options': {'defaultType': 'swap'},
    'enableRateLimit': True
})

# Fetch symbols info for minimum amounts
def fetch_coinex_symbols():
    url = "https://api.coinex.com/v2/futures/market"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        symbols_info = {
            s['market']: float(s['min_amount'])
            for s in data['data']
            if s['market'].endswith('USDT')
        }
        logger.info(f"Fetched {len(symbols_info)} USDT futures trading pairs from CoinEx: {', '.join(list(symbols_info.keys())[:5])}...")
        return symbols_info
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching symbols from CoinEx: {e}")
        return {}

# Validate symbol against CoinEx futures symbols
def validate_symbol(symbol):
    valid_symbols = fetch_coinex_symbols()
    return symbol.upper() in valid_symbols

# Function to generate signature for CoinEx API
def generate_signature(method, path, body, timestamp, secret):
    prepared_str = f"{method}{path}{body}{timestamp}"
    return hmac.new(bytes(secret, 'latin-1'), bytes(prepared_str, 'latin-1'), hashlib.sha256).hexdigest().lower()

# Function to set take-profit and stop-loss
def set_take_profit_stop_loss(symbol, side, entry_price):
    timestamp = str(int(time.time() * 1000))
    
    if side == 'long':
        take_profit_price = str(round(entry_price * 1.30, 6))  # 30% profit
        stop_loss_price = str(round(entry_price * 0.98, 6))    # 2% loss
    else:  # short
        take_profit_price = str(round(entry_price * 0.70, 6))  # 30% profit
        stop_loss_price = str(round(entry_price * 1.02, 6))    # 2% loss

    tp_params = {
        "market": symbol,
        "market_type": "FUTURES",
        "take_profit_type": "mark_price",
        "take_profit_price": take_profit_price
    }
    tp_body = json.dumps(tp_params, separators=(',', ':'))
    tp_path = "/v2/futures/set-position-take-profit"
    tp_signature = generate_signature("POST", tp_path, tp_body, timestamp, COINEX_API_SECRET)
    tp_headers = {
        "X-COINEX-KEY": COINEX_API_KEY,
        "X-COINEX-SIGN": tp_signature,
        "X-COINEX-TIMESTAMP": timestamp,
        "Content-Type": "application/json"
    }

    sl_params = {
        "market": symbol,
        "market_type": "FUTURES",
        "stop_loss_type": "mark_price",
        "stop_loss_price": stop_loss_price
    }
    sl_body = json.dumps(sl_params, separators=(',', ':'))
    sl_path = "/v2/futures/set-position-stop-loss"
    sl_signature = generate_signature("POST", sl_path, sl_body, timestamp, COINEX_API_SECRET)
    sl_headers = {
        "X-COINEX-KEY": COINEX_API_KEY,
        "X-COINEX-SIGN": sl_signature,
        "X-COINEX-TIMESTAMP": timestamp,
        "Content-Type": "application/json"
    }

    try:
        logger.info(f"Setting take-profit for {symbol}: Price={take_profit_price}")
        tp_response = requests.post(TAKE_PROFIT_URL, headers=tp_headers, data=tp_body)
        tp_response.raise_for_status()
        tp_data = tp_response.json()
        if tp_data.get('code') == 0:
            logger.info(f"Take-profit set for {symbol}: {take_profit_price}")
        else:
            logger.error(f"Failed to set take-profit for {symbol}: {tp_data.get('message')}")

        logger.info(f"Setting stop-loss for {symbol}: Price={stop_loss_price}")
        sl_response = requests.post(STOP_LOSS_URL, headers=sl_headers, data=sl_body)
        sl_response.raise_for_status()
        sl_data = sl_response.json()
        if sl_data.get('code') == 0:
            logger.info(f"Stop-loss set for {symbol}: {stop_loss_price}")
        else:
            logger.error(f"Failed to set stop-loss for {symbol}: {sl_data.get('message')}")
    except requests.exceptions.RequestException as e:
        logger.error(f"Error setting take-profit/stop-loss for {symbol}: {e}")
        if hasattr(e.response, 'text'):
            logger.error(f"Response content: {e.response.text}")

# Async function to set trading parameters
async def set_trading_parameters(symbol):
    try:
        if not symbol.endswith("USDT"):
            raise ValueError(f"Invalid symbol format: {symbol}")
        await exchange.set_leverage(trading_params['leverage'], symbol)
        await exchange.set_margin_mode(trading_params['margin_mode'], symbol, {'leverage': trading_params['leverage']})
        logger.info(f"Set parameters for {symbol}: Leverage {trading_params['leverage']}x, {trading_params['margin_mode']} mode")
        return True
    except Exception as e:
        logger.error(f"Error setting trading parameters for {symbol}: {e}")
        return False

# Async function to fetch current day's candle data
async def fetch_current_day_candle(symbol):
    try:
        # Fetch the most recent completed daily candle to get the open price
        ohlcv = await exchange.fetch_ohlcv(symbol, '1d', limit=1)
        if not ohlcv:
            logger.error(f"No daily data for {symbol}")
            return None
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        
        # Fetch current market price
        ticker = await exchange.fetch_ticker(symbol)
        if 'bid' not in ticker or 'ask' not in ticker:
            logger.error(f"Error: 'bid' or 'ask' not found in ticker for {symbol}")
            return None
        current_price = (float(ticker['bid']) + float(ticker['ask'])) / 2
        
        # Construct current day's candle
        current_time = pd.Timestamp.now(tz='UTC').floor('D')
        open_price = float(df['open'].iloc[0])  # Open from previous day's close
        high_price = max(float(df['high'].iloc[0]), current_price)
        low_price = min(float(df['low'].iloc[0]), current_price)
        volume = float(df['volume'].iloc[0])  # Approximation
        
        candle_df = pd.DataFrame({
            'timestamp': [int(current_time.timestamp() * 1000)],
            'open': [open_price],
            'high': [high_price],
            'low': [low_price],
            'close': [current_price],
            'volume': [volume]
        })
        candle_df['timestamp'] = pd.to_datetime(candle_df['timestamp'], unit='ms')
        candle_df.set_index('timestamp', inplace=True)
        candle_df.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
        logger.info(f"Constructed current day candle for {symbol}: Open={open_price}, Close={current_price}")
        return candle_df
    except Exception as e:
        logger.error(f"Error fetching current day candle for {symbol}: {e}")
        return None

# Function to calculate quantity
def calculate_quantity(symbol, latest_close):
    min_amount = symbols_info.get(symbol, 0.0001)
    quantity = min_amount * 1.01
    return quantity

# Async function to check current position
async def check_position(symbol):
    try:
        positions = await exchange.fetch_positions([symbol])
        for pos in positions:
            if pos['symbol'] == symbol and float(pos['contracts']) > 0:
                return pos['side'].lower(), float(pos['contracts'])
        return None, 0
    except Exception as e:
        logger.error(f"Error checking position for {symbol}: {e}")
        return None, 0

# Async function to send Telegram notifications
async def send_order_notification(bot, chat_id, symbol, side, price, order_id):
    message = f"{side} order placed for {symbol} at {price:.2f} USDT (Order ID: {order_id})"
    try:
        await bot.send_message(chat_id=chat_id, text=message)
        logger.info(f"Sent Telegram notification for {side} order on {symbol}")
    except Exception as e:
        logger.error(f"Failed to send Telegram notification for {symbol}: {e}")

async def send_error_notification(bot, chat_id, symbol, error_message):
    message = f"Failed to place order for {symbol}. Error: {error_message}"
    try:
        await bot.send_message(chat_id=chat_id, text=message)
        logger.info(f"Sent Telegram error notification for {symbol}")
    except Exception as e:
        logger.error(f"Failed to send Telegram error notification for {symbol}: {e}")

# Async function to place a market buy order
async def place_market_buy_order(symbol, quantity, bot, chat_id):
    try:
        if not await set_trading_parameters(symbol):
            raise Exception("Failed to set trading parameters")
        order = await exchange.create_market_buy_order(symbol, amount=quantity)
        latest_price = float((await exchange.fetch_ticker(symbol))['close'])
        logger.info(f"Market Buy Order placed for {symbol}: {order['id']}, Quantity: {quantity}, Leverage: {trading_params['leverage']}x, Margin Mode: {trading_params['margin_mode']}")
        set_take_profit_stop_loss(symbol, 'long', latest_price)
        await send_order_notification(bot, chat_id, symbol, "BUY", latest_price, order['id'])
        return order['id']
    except Exception as e:
        logger.error(f"Error placing Market Buy Order for {symbol}: {e}")
        await send_error_notification(bot, chat_id, symbol, str(e))
        return None

# Async function to place a market sell order
async def place_market_sell_order(symbol, quantity, bot, chat_id):
    try:
        if not await set_trading_parameters(symbol):
            raise Exception("Failed to set trading parameters")
        order = await exchange.create_market_sell_order(symbol, amount=quantity)
        latest_price = float((await exchange.fetch_ticker(symbol))['close'])
        logger.info(f"Market Sell Order placed for {symbol}: {order['id']}, Quantity: {quantity}, Leverage: {trading_params['leverage']}x, Margin Mode: {trading_params['margin_mode']}")
        set_take_profit_stop_loss(symbol, 'short', latest_price)
        await send_order_notification(bot, chat_id, symbol, "SELL", latest_price, order['id'])
        return order['id']
    except Exception as e:
        logger.error(f"Error placing Market Sell Order for {symbol}: {e}")
        await send_error_notification(bot, chat_id, symbol, str(e))
        return None

# Async function to check and trade
async def check_and_trade(symbol, bot, chat_id):
    try:
        logger.info(f"Checking {symbol} - Last order type: {last_order_types.get(symbol, 'None')}")
        candle_data = await fetch_current_day_candle(symbol)
        if candle_data is None or candle_data.empty:
            logger.error(f"No daily candle data for {symbol}")
            await send_error_notification(bot, chat_id, symbol, "No daily candle data")
            return

        open_price = candle_data['Open'].iloc[-1]
        close_price = candle_data['Close'].iloc[-1]
        logger.info(f"{symbol} - Open: {open_price:.8f}, Close: {close_price:.8f}")

        position_side, position_size = await check_position(symbol)
        quantity = calculate_quantity(symbol, close_price)

        if close_price > open_price and last_order_types.get(symbol) != "BUY":
            if position_side == 'short':
                order_id = await place_market_buy_order(symbol, position_size, bot, chat_id)
                if order_id:
                    logger.info(f"Closed short position for {symbol} with order {order_id}")
                else:
                    logger.error(f"Failed to close short position for {symbol}")
                    await send_error_notification(bot, chat_id, symbol, "Failed to close short position")
                    return
            if position_side != 'long':
                order_id = await place_market_buy_order(symbol, quantity, bot, chat_id)
                if order_id:
                    last_order_types[symbol] = "BUY"
                    logger.info(f"New long position opened for {symbol}: {order_id}")
                else:
                    logger.error(f"Failed to place new buy order for {symbol}")
            else:
                logger.info(f"{symbol} already has a long position. Skipping...")

        elif close_price < open_price and last_order_types.get(symbol) != "SELL":
            if position_side == 'long':
                order_id = await place_market_sell_order(symbol, position_size, bot, chat_id)
                if order_id:
                    logger.info(f"Closed long position for {symbol} with order {order_id}")
                else:
                    logger.error(f"Failed to close long position for {symbol}")
                    await send_error_notification(bot, chat_id, symbol, "Failed to close long position")
                    return
            if position_side != 'short':
                order_id = await place_market_sell_order(symbol, quantity, bot, chat_id)
                if order_id:
                    last_order_types[symbol] = "SELL"
                    logger.info(f"New short position opened for {symbol}: {order_id}")
                else:
                    logger.error(f"Failed to place new sell order for {symbol}")
            else:
                logger.info(f"{symbol} already has a short position. Skipping...")

        else:
            logger.info(f"{symbol} No clear signal or same as last order type. Skipping...")

    except Exception as e:
        logger.error(f"Error processing {symbol}: {e}")
        await send_error_notification(bot, chat_id, symbol, str(e))

# Telegram Command Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Trading bot started. Use /set_symbols <symbol1> <symbol2> ... to add trading symbols or /reset_symbols to clear them.")

async def set_symbols(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global SELECTED_SYMBOLS, last_order_types
    if not context.args:
        await update.message.reply_text("Please provide at least one symbol, e.g., /set_symbols BTCUSDT ETHUSDT")
        return

    new_symbols = []
    invalid_symbols = []
    skipped_duplicates = []
    for symbol in context.args:
        symbol = symbol.upper()
        if symbol in SELECTED_SYMBOLS:
            skipped_duplicates.append(symbol)
            continue
        if validate_symbol(symbol):
            new_symbols.append(symbol)
        else:
            invalid_symbols.append(symbol)

    if new_symbols:
        SELECTED_SYMBOLS.extend(new_symbols)
        for symbol in new_symbols:
            last_order_types[symbol] = None
        await update.message.reply_text(f"Added trading symbols: {', '.join(new_symbols)}. Current symbols: {', '.join(SELECTED_SYMBOLS)}")
    else:
        await update.message.reply_text("No new valid symbols provided.")

    if invalid_symbols:
        await update.message.reply_text(f"Invalid symbols: {', '.join(invalid_symbols)}")
    if skipped_duplicates:
        await update.message.reply_text(f"Skipped duplicate symbols: {', '.join(skipped_duplicates)}")

async def reset_symbols(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global SELECTED_SYMBOLS, last_order_types
    SELECTED_SYMBOLS = []
    last_order_types.clear()
    await update.message.reply_text("Cleared all trading symbols and last order types. Trading stopped.")

# Trading Loop
async def run_trading_loop(application: Application):
    bot = application.bot
    chat_id = CHAT_ID
    while True:
        if SELECTED_SYMBOLS:
            valid_symbols = []
            for symbol in SELECTED_SYMBOLS:
                candle_data = await fetch_current_day_candle(symbol)
                if candle_data is not None and not candle_data.empty:
                    valid_symbols.append(symbol)
                    await check_and_trade(symbol, bot, chat_id)
                await asyncio.sleep(1)  # Avoid rate limits
            logger.info(f"Completed trading cycle for {len(valid_symbols)} valid symbols: {valid_symbols}")
        else:
            logger.info("No symbols selected, skipping trading cycle")
        await asyncio.sleep(60)  # Check every minute

# Main Function
async def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Add command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("set_symbols", set_symbols))
    application.add_handler(CommandHandler("reset_symbols", reset_symbols))

    # Start trading loop
    asyncio.create_task(run_trading_loop(application))

    # Start the bot
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    asyncio.run(main())