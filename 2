import asyncio
from ccxt.async_support import coinex as async_coinex

# Create async exchange instance
exchange = async_coinex({
    'apiKey': COINEX_API_KEY,
    'secret': COINEX_API_SECRET,
    'options': {'defaultType': 'swap'},
    'enableRateLimit': True
})

async def process_symbol(symbol, i):
    print(f"\nProcessing pair #{i}/{len(symbols)}: {symbol}")
    # Convert synchronous calls to async
    historical_data = await exchange.fetch_ohlcv(symbol, time_interval, 100)
    latest_candle = await exchange.fetch_ticker(symbol)
    # ... rest of the trading logic ...
    
async def ema_strategy():
    while True:
        try:
            # Refresh symbols concurrently
            symbols_info = await fetch_coinex_symbols_async()
            symbols = list(symbols_info.keys())
            
            # Process all symbols concurrently
            tasks = [
                process_symbol(symbol, i + 1)
                for i, symbol in enumerate(symbols)
            ]
            await asyncio.gather(*tasks)
            
            print(f"\nCycle completed. Waiting 30 minutes...")
            await asyncio.sleep(1800)
            
        except Exception as e:
            print(f'An error occurred in cycle: {e}')
            await asyncio.sleep(60)

# Run the strategy
if symbols:
    asyncio.run(ema_strategy())
else:
    print("No symbols available to trade. Exiting...")
