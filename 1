import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import ccxt
import telegram
from io import BytesIO
import config

class TrendlinesWithBreaks:
    def __init__(self, primary_length=20, secondary_length=10, mult=2.0, primary_extension=50, secondary_extension=25):
        self.primary_length = primary_length
        self.secondary_length = secondary_length
        self.mult = mult
        self.primary_extension = primary_extension
        self.secondary_extension = secondary_extension
        self.primary_upper = []
        self.primary_lower = []
        self.secondary_upper = []
        self.secondary_lower = []
        self.primary_upper_active = False
        self.primary_lower_active = False
        self.secondary_upper_active = False
        self.secondary_lower_active = False
        self.last_primary_ph_idx = -1
        self.last_primary_pl_idx = -1
        self.last_secondary_ph_idx = -1
        self.last_secondary_pl_idx = -1

    def pivot_high(self, series, length):
        pivots = pd.Series(np.nan, index=series.index)
        half_length = length // 2
        for i in range(length, len(series) - half_length):
            left_max = series.iloc[i - length:i].max()
            right_max = series.iloc[i + 1:i + half_length + 1].max()
            if series.iloc[i] > left_max and series.iloc[i] > right_max:
                pivots.iloc[i] = series.iloc[i]
        return pivots

    def pivot_low(self, series, length):
        pivots = pd.Series(np.nan, index=series.index)
        half_length = length // 2
        for i in range(length, len(series) - half_length):
            left_min = series.iloc[i - length:i].min()
            right_min = series.iloc[i + 1:i + half_length + 1].min()
            if series.iloc[i] < left_min and series.iloc[i] < right_min:
                pivots.iloc[i] = series.iloc[i]
        return pivots

    def calculate_slope(self, close, length):
        return close.rolling(window=length).std() * self.mult / length

    def check_intersection(self, upper_val, lower_val):
        if not np.isnan(upper_val) and not np.isnan(lower_val):
            return upper_val <= lower_val
        return False

    def process(self, high, low, close):
        close = pd.Series(close, index=range(len(close)))
        high = pd.Series(high, index=range(len(high)))
        low = pd.Series(low, index=range(len(low)))

        # Calculate pivots
        primary_ph = self.pivot_high(high, self.primary_length)
        primary_pl = self.pivot_low(low, self.primary_length)
        secondary_ph = self.pivot_high(high, self.secondary_length)
        secondary_pl = self.pivot_low(low, self.secondary_length)
        
        primary_slope = self.calculate_slope(close, self.primary_length)
        secondary_slope = self.calculate_slope(close, self.secondary_length)

        # Initialize output series
        primary_upper_lines = pd.Series(np.nan, index=close.index)
        primary_lower_lines = pd.Series(np.nan, index=close.index)
        secondary_upper_lines = pd.Series(np.nan, index=close.index)
        secondary_lower_lines = pd.Series(np.nan, index=close.index)
        primary_upos = pd.Series(0, index=close.index)
        primary_dnos = pd.Series(0, index=close.index)
        secondary_upos = pd.Series(0, index=close.index)
        secondary_dnos = pd.Series(0, index=close.index)

        for i in range(len(close)):
            # Primary Upper Trendline
            if not np.isnan(primary_ph.iloc[i]) and (not self.primary_upper_active or self.last_primary_ph_idx < i - self.primary_length):
                if self.primary_upper and self.primary_upper[-1][4]:
                    last_end_idx, _, last_slope, _, last_value = self.primary_upper[-1]
                    self.primary_upper.append((last_end_idx, i, last_slope, last_value, last_value))
                else:
                    self.primary_upper.append((i, i, primary_slope.iloc[i], primary_ph.iloc[i], primary_ph.iloc[i]))
                self.primary_upper_active = True
                self.last_primary_ph_idx = i

            # Primary Lower Trendline
            if not np.isnan(primary_pl.iloc[i]) and (not self.primary_lower_active or self.last_primary_pl_idx < i - self.primary_length):
                if self.primary_lower and self.primary_lower[-1][4]:
                    last_end_idx, _, last_slope, _, last_value = self.primary_lower[-1]
                    self.primary_lower.append((last_end_idx, i, last_slope, last_value, last_value))
                else:
                    self.primary_lower.append((i, i, primary_slope.iloc[i], primary_pl.iloc[i], primary_pl.iloc[i]))
                self.primary_lower_active = True
                self.last_primary_pl_idx = i

            # Secondary Upper Trendline
            if not np.isnan(secondary_ph.iloc[i]) and (not self.secondary_upper_active or self.last_secondary_ph_idx < i - self.secondary_length):
                if self.secondary_upper and self.secondary_upper[-1][4]:
                    last_end_idx, _, last_slope, _, last_value = self.secondary_upper[-1]
                    self.secondary_upper.append((last_end_idx, i, last_slope, last_value, last_value))
                else:
                    self.secondary_upper.append((i, i, secondary_slope.iloc[i], secondary_ph.iloc[i], secondary_ph.iloc[i]))
                self.secondary_upper_active = True
                self.last_secondary_ph_idx = i

            # Secondary Lower Trendline
            if not np.isnan(secondary_pl.iloc[i]) and (not self.secondary_lower_active or self.last_secondary_pl_idx < i - self.secondary_length):
                if self.secondary_lower and self.secondary_lower[-1][4]:
                    last_end_idx, _, last_slope, _, last_value = self.secondary_lower[-1]
                    self.secondary_lower.append((last_end_idx, i, last_slope, last_value, last_value))
                else:
                    self.secondary_lower.append((i, i, secondary_slope.iloc[i], secondary_pl.iloc[i], secondary_pl.iloc[i]))
                self.secondary_lower_active = True
                self.last_secondary_pl_idx = i

            # Process trendlines
            for lines, trendlines, is_upper, active_flag, extension in [
                (primary_upper_lines, self.primary_upper, True, self.primary_upper_active, self.primary_extension),
                (primary_lower_lines, self.primary_lower, False, self.primary_lower_active, self.primary_extension),
                (secondary_upper_lines, self.secondary_upper, True, self.secondary_upper_active, self.secondary_extension),
                (secondary_lower_lines, self.secondary_lower, False, self.secondary_lower_active, self.secondary_extension)
            ]:
                current_val = np.nan
                for idx, (start_idx, end_idx, slope_val, start_val, last_val) in enumerate(trendlines):
                    if i >= start_idx and i <= end_idx + extension:
                        bars_since = i - start_idx
                        val = start_val + (slope_val * bars_since if not is_upper else -slope_val * bars_since)
                        lines.iloc[i] = val
                        current_val = val
                        trendlines[idx] = (start_idx, i, slope_val, start_val, val)

                # Breakout detection
                if active_flag and not np.isnan(current_val):
                    if (is_upper and close.iloc[i] > current_val) or (not is_upper and close.iloc[i] < current_val):
                        if lines is primary_upper_lines:
                            primary_upos.iloc[i] = 1
                            self.primary_upper_active = False
                        elif lines is primary_lower_lines:
                            primary_dnos.iloc[i] = 1
                            self.primary_lower_active = False
                        elif lines is secondary_upper_lines:
                            secondary_upos.iloc[i] = 1
                            self.secondary_upper_active = False
                        elif lines is secondary_lower_lines:
                            secondary_dnos.iloc[i] = 1
                            self.secondary_lower_active = False
                        for idx, (start_idx, end_idx, slope_val, start_val, last_val) in enumerate(trendlines):
                            if end_idx == i:
                                trendlines[idx] = (start_idx, i, slope_val, start_val, current_val)
                                lines.iloc[i:] = np.nan

        # Detect breakouts
        primary_up_breaks = (primary_upos.diff() > 0) & (primary_upos == 1)
        primary_down_breaks = (primary_dnos.diff() > 0) & (primary_dnos == 1)
        secondary_up_breaks = (secondary_upos.diff() > 0) & (secondary_upos == 1)
        secondary_down_breaks = (secondary_dnos.diff() > 0) & (secondary_dnos == 1)

        return {
            'primary_upper': primary_upper_lines,
            'primary_lower': primary_lower_lines,
            'secondary_upper': secondary_upper_lines,
            'secondary_lower': secondary_lower_lines,
            'primary_up_breaks': primary_up_breaks,
            'primary_down_breaks': primary_down_breaks,
            'secondary_up_breaks': secondary_up_breaks,
            'secondary_down_breaks': secondary_down_breaks
        }

async def send_to_telegram(plot_buffer):
    bot = telegram.Bot(token=config.TELEGRAM_TOKEN)
    async with bot:
        await bot.send_photo(chat_id=config.CHAT_ID, photo=plot_buffer)

def fetch_btcusdt_data():
    exchange = ccxt.binance()
    timeframe = '1h'
    limit = 100
    ohlcv = exchange.fetch_ohlcv('BTC/USDT', timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    return df

def create_plot(df, results):
    plt.figure(figsize=(14, 7))
    
    plt.plot(df['timestamp'], df['close'], label='BTC/USDT Close', color='blue', alpha=0.7)
    
    for line, color, label, width in [
        (results['primary_upper'], 'teal', 'Primary Upper', 2),
        (results['primary_lower'], 'red', 'Primary Lower', 2),
        (results['secondary_upper'], 'green', 'Secondary Upper', 1),
        (results['secondary_lower'], 'purple', 'Secondary Lower', 1)
    ]:
        valid = line[line.notna()]
        times = df['timestamp'][line.notna()]
        plt.plot(times, valid, label=label, color=color, linestyle='--', linewidth=width)

    for breaks, color, marker, label in [
        (results['primary_up_breaks'], 'green', '^', 'Primary Up Break'),
        (results['primary_down_breaks'], 'red', 'v', 'Primary Down Break'),
        (results['secondary_up_breaks'], 'lime', '^', 'Secondary Up Break'),
        (results['secondary_down_breaks'], 'magenta', 'v', 'Secondary Down Break')
    ]:
        break_df = df[breaks]
        break_indices = break_df.index
        break_values = (results['primary_upper'] if 'primary_up' in label.lower() else 
                       results['primary_lower'] if 'primary_down' in label.lower() else 
                       results['secondary_upper'] if 'secondary_up' in label.lower() else 
                       results['secondary_lower'])[break_indices]
        plt.scatter(break_df['timestamp'], break_values, color=color, marker=marker, s=100, zorder=5, label=label)
    
    plt.title(f'BTC/USDT Trendlines with Breaks - {datetime.now().strftime("%Y-%m-d %H:%M")}')
    plt.xlabel('Time')
    plt.ylabel('Price (USDT)')
    plt.legend(loc='best')
    plt.grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    plt.tight_layout()
    
    buffer = BytesIO()
    plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
    buffer.seek(0)
    plt.close()
    return buffer

async def main():
    df = fetch_btcusdt_data()
    trendlines = TrendlinesWithBreaks(
        primary_length=20,
        secondary_length=10,
        mult=2.0,
        primary_extension=50,
        secondary_extension=25
    )
    results = trendlines.process(df['high'], df['low'], df['close'])
    plot_buffer = create_plot(df, results)
    await send_to_telegram(plot_buffer)
    plot_buffer.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())