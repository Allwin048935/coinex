import ccxt.async_support as ccxt
import pandas as pd
import requests
import time
import hmac
import hashlib
import json
import asyncio
from config import COINEX_API_KEY, COINEX_API_SECRET, time_interval, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

# Trading parameters
trading_params = {
    "market_type": "FUTURES",
    "margin_mode": "isolated",
    "leverage": 10,
    "position_value_usd": 15.0,  # $15 position
    "close_value_usd": 14.0,     # Close $14
}

# API endpoints
TAKE_PROFIT_URL = "https://api.coinex.com/v2/futures/set-position-take-profit"
STOP_LOSS_URL = "https://api.coinex.com/v2/futures/set-position-stop-loss"
TELEGRAM_API_URL = "https://api.telegram.org/bot{}/sendMessage"

# Fetch symbols dynamically from CoinEx API
def fetch_coinex_symbols():
    url = "https://api.coinex.com/v2/futures/market"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        symbols_info = {
            s['market']: float(s['min_amount'])
            for s in data['data']
            if s['quote_ccy'] == 'USDT' and s['is_market_available']
        }
        return symbols_info
    except requests.exceptions.RequestException as e:
        print(f"Error fetching symbols from CoinEx: {e}")
        return {}

# Create a CoinEx client
exchange = ccxt.coinex({
    'apiKey': COINEX_API_KEY,
    'secret': COINEX_API_SECRET,
    'options': {'defaultType': 'swap'},
    'enableRateLimit': True
})

# EMA strategy parameters
short_ema_period = 5
long_ema_period = 100

# Get initial symbols and their min_amounts
symbols_info = fetch_coinex_symbols()
symbols = list(symbols_info.keys())

# Track last order types, open orders, last signals, and test completion
last_order_types = {symbol: None for symbol in symbols}
open_orders = {symbol: None for symbol in symbols}
last_signals = {symbol: None for symbol in symbols}
test_completed = {symbol: False for symbol in symbols}  # Track if remaining position close test was done

# Function to send Telegram message
def send_telegram_message(message):
    try:
        url = TELEGRAM_API_URL.format(TELEGRAM_BOT_TOKEN)
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print(f"Telegram message sent: {message}")
    except requests.exceptions.RequestException as e:
        print(f"Error sending Telegram message: {e}")

# Function to generate signature for CoinEx API
def generate_signature(method, path, body, timestamp, secret):
    prepared_str = f"{method}{path}{body}{timestamp}"
    return hmac.new(bytes(secret, 'latin-1'), bytes(prepared_str, 'latin-1'), hashlib.sha256).hexdigest().lower()

# Function to set take-profit and stop-loss
def set_take_profit_stop_loss(symbol, side, entry_price):
    timestamp = str(int(time.time() * 1000))
    if side == 'long':
        take_profit_price = str(round(entry_price * 1.30, 6))  # 30% profit
        stop_loss_price = str(round(entry_price * 0.90, 6))    # 10% loss
    else:  # short
        take_profit_price = str(round(entry_price * 0.70, 6))  # 30% profit
        stop_loss_price = str(round(entry_price * 1.10, 6))    # 10% loss

    tp_params = {
        "market": symbol,
        "market_type": "FUTURES",
        "take_profit_type": "mark_price",
        "take_profit_price": take_profit_price
    }
    tp_body = json.dumps(tp_params, separators=(',', ':'))
    tp_path = "/v2/futures/set-position-take-profit"
    tp_signature = generate_signature("POST", tp_path, tp_body, timestamp, COINEX_API_SECRET)
    tp_headers = {
        "X-COINEX-KEY": COINEX_API_KEY,
        "X-COINEX-SIGN": tp_signature,
        "X-COINEX-TIMESTAMP": timestamp,
        "Content-Type": "application/json"
    }

    sl_params = {
        "market": symbol,
        "market_type": "FUTURES",
        "stop_loss_type": "mark_price",
        "stop_loss_price": stop_loss_price
    }
    sl_body = json.dumps(sl_params, separators=(',', ':'))
    sl_path = "/v2/futures/set-position-stop-loss"
    sl_signature = generate_signature("POST", sl_path, sl_body, timestamp, COINEX_API_SECRET)
    sl_headers = {
        "X-COINEX-KEY": COINEX_API_KEY,
        "X-COINEX-SIGN": sl_signature,
        "X-COINEX-TIMESTAMP": timestamp,
        "Content-Type": "application/json"
    }

    try:
        tp_response = requests.post(TAKE_PROFIT_URL, headers=tp_headers, data=tp_body)
        tp_response.raise_for_status()
        tp_data = tp_response.json()
        if tp_data.get('code') == 0:
            print(f"Take-profit set for {symbol}: {take_profit_price}")
        else:
            print(f"Failed to set take-profit for {symbol}: {tp_data.get('message')}")

        sl_response = requests.post(STOP_LOSS_URL, headers=sl_headers, data=sl_body)
        sl_response.raise_for_status()
        sl_data = sl_response.json()
        if sl_data.get('code') == 0:
            print(f"Stop-loss set for {symbol}: {stop_loss_price}")
        else:
            print(f"Failed to set stop-loss for {symbol}: {sl_data.get('message')}")
    except requests.exceptions.RequestException as e:
        print(f"Error setting take-profit/stop-loss for {symbol}: {e}")

# Async function to set trading parameters
async def set_trading_parameters(symbol):
    try:
        if not symbol.endswith("USDT"):
            raise ValueError(f"Invalid symbol format: {symbol}")
        await exchange.set_leverage(trading_params['leverage'], symbol)
        await exchange.set_margin_mode(trading_params['margin_mode'], symbol, {'leverage': trading_params['leverage']})
        print(f"Set parameters for {symbol}: Leverage {trading_params['leverage']}x, {trading_params['margin_mode']} mode")
        return True
    except Exception as e:
        print(f"Error setting trading parameters for {symbol}: {e}")
        return False

# Function to calculate EMA
def calculate_ema(df, period, column='close'):
    return df[column].ewm(span=period, adjust=False).mean()

# Async function to fetch historical data
async def fetch_ohlcv(symbol, timeframe, limit):
    try:
        ohlcv = await exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['short_ema'] = calculate_ema(df, short_ema_period)
        df['long_ema'] = calculate_ema(df, long_ema_period)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"Error fetching OHLCV for {symbol}: {e}")
        return None

# Function to calculate quantity based on USD value
def calculate_quantity(symbol, latest_close, usd_value):
    min_amount = symbols_info.get(symbol, 0.0001)
    quantity = max(min_amount, usd_value / latest_close * trading_params['leverage'])
    return round(quantity, 6)

# Async function to check current position
async def check_position(symbol):
    try:
        positions = await exchange.fetch_positions([symbol])
        for pos in positions:
            if pos['symbol'] == symbol and float(pos['contracts']) > 0:
                return pos['side'].lower(), float(pos['contracts'])
        return None, 0
    except Exception as e:
        print(f"Error checking position for {symbol}: {e}")
        return None, 0

# Async function to place a market buy order
async def place_market_buy_order(symbol, quantity, order_num, retries=3, delay=1):
    attempt = 0
    while attempt < retries:
        try:
            if not await set_trading_parameters(symbol):
                raise Exception("Failed to set trading parameters")
            order = await exchange.create_market_buy_order(symbol, amount=quantity)
            print(f"Order #{order_num} - Market Buy Order placed for {symbol}: {order['id']}, Quantity: {quantity}")
            latest_price = float((await exchange.fetch_ticker(symbol))['close'])
            set_take_profit_stop_loss(symbol, 'long', latest_price)
            return order['id']
        except Exception as e:
            attempt += 1
            print(f"Order #{order_num} - Error placing Market Buy Order for {symbol} (Attempt {attempt}/{retries}): {e}")
            if attempt < retries:
                await asyncio.sleep(delay)
    print(f"Order #{order_num} - Failed to place Market Buy Order for {symbol} after {retries} attempts.")
    return None

# Async function to place a market sell order
async def place_market_sell_order(symbol, quantity, order_num, retries=3, delay=1):
    attempt = 0
    while attempt < retries:
        try:
            if not await set_trading_parameters(symbol):
                raise Exception("Failed to set trading parameters")
            order = await exchange.create_market_sell_order(symbol, amount=quantity)
            print(f"Order #{order_num} - Market Sell Order placed for {symbol}: {order['id']}, Quantity: {quantity}")
            latest_price = float((await exchange.fetch_ticker(symbol))['close'])
            set_take_profit_stop_loss(symbol, 'short', latest_price)
            return order['id']
        except Exception as e:
            attempt += 1
            print(f"Order #{order_num} - Error placing Market Sell Order for {symbol} (Attempt {attempt}/{retries}): {e}")
            if attempt < retries:
                await asyncio.sleep(delay)
    print(f"Order #{order_num} - Failed to place Market Sell Order for {symbol} after {retries} attempts.")
    return None

# Async function to close existing position with 5 retries
async def close_existing_position(symbol, position_side, position_size, order_num, retries=5, delay=1):
    attempt = 0
    while attempt < retries:
        try:
            if not await set_trading_parameters(symbol):
                raise Exception("Failed to set trading parameters")
            if position_side == 'short':
                order = await exchange.create_market_buy_order(symbol, amount=position_size)
                print(f"Order #{order_num} - Closed short position for {symbol}: {order['id']}, Quantity: {position_size}")
                return order['id']
            elif position_side == 'long':
                order = await exchange.create_market_sell_order(symbol, amount=position_size)
                print(f"Order #{order_num} - Closed long position for {symbol}: {order['id']}, Quantity: {position_size}")
                return order['id']
        except Exception as e:
            attempt += 1
            print(f"Order #{order_num} - Error closing {position_side} position for {symbol} (Attempt {attempt}/{retries}): {e}")
            if attempt < retries:
                await asyncio.sleep(delay)
    print(f"Order #{order_num} - Failed to close {position_side} position for {symbol} after {retries} attempts.")
    send_telegram_message(f"Failed to close {position_side} position for {symbol} after {retries} attempts.")
    return None

# Async function to cancel an open order
async def cancel_open_order(symbol, order_id, retries=3, delay=1):
    attempt = 0
    while attempt < retries:
        try:
            if order_id:
                await exchange.cancel_order(order_id, symbol)
                print(f"Cancelled open order for {symbol}: {order_id}")
                return True
            return False
        except Exception as e:
            attempt += 1
            print(f"Error cancelling order for {symbol}: {e} (Attempt {attempt}/{retries})")
            if attempt < retries:
                await asyncio.sleep(delay)
    print(f"Failed to cancel open order for {symbol}: {order_id} after {retries} attempts.")
    return False

# Main async trading function
async def ema_strategy():
    global symbols, symbols_info, last_order_types, open_orders, last_signals, test_completed

    while True:
        try:
            # Refresh symbols list
            symbols_info = fetch_coinex_symbols()
            symbols = list(symbols_info.keys())

            # Update tracking dictionaries
            last_order_types = {symbol: last_order_types.get(symbol) for symbol in symbols}
            open_orders = {symbol: open_orders.get(symbol) for symbol in symbols}
            last_signals = {symbol: last_signals.get(symbol) for symbol in symbols}
            test_completed = {symbol: test_completed.get(symbol, False) for symbol in symbols}

            trades_placed = 0

            for i, symbol in enumerate(symbols, 1):
                symbol = symbol.upper()
                print(f"\nProcessing pair #{i}/{len(symbols)}: {symbol}")

                historical_data = await fetch_ohlcv(symbol, time_interval, 100)
                if historical_data is None or len(historical_data) < long_ema_period:
                    print(f"Not enough data for {symbol}. Skipping...")
                    continue

                latest_candle = await exchange.fetch_ticker(symbol)
                if 'close' not in latest_candle:
                    print(f"Error: 'close' not found in latest_candle for {symbol}")
                    continue

                latest_close = float(latest_candle['close'])
                if latest_close is None:
                    print(f"Error: latest_close is None for {symbol}")
                    continue

                # Calculate quantities for $15 and $14
                full_quantity = calculate_quantity(symbol, latest_close, trading_params['position_value_usd'])
                close_quantity = calculate_quantity(symbol, latest_close, trading_params['close_value_usd'])
                # Calculate remaining quantity (full - close)
                remaining_quantity = round(full_quantity - close_quantity, 6)
                print(f"Symbol: {symbol}, Latest Close: {latest_close}, Full Quantity: {full_quantity}, Close Quantity: {close_quantity}, Remaining Quantity: {remaining_quantity}")

                # Check EMA conditions
                if historical_data['short_ema'].iloc[-1] > historical_data['long_ema'].iloc[-1]:
                    current_signal = 'long'
                    print(f'{symbol} Potential Buy Signal (Crossover)')
                elif historical_data['short_ema'].iloc[-1] < historical_data['long_ema'].iloc[-1]:
                    current_signal = 'short'
                    print(f'{symbol} Potential Sell Signal (Crossunder)')
                else:
                    current_signal = None
                    print(f'{symbol} No clear signal (EMAs equal)')
                    continue

                # Handle existing orders and new signals
                if current_signal and last_signals.get(symbol) != current_signal:
                    position_side, position_size = await check_position(symbol)
                    if position_side:
                        trades_placed += 1
                        close_order_id = await close_existing_position(symbol, position_side, position_size, trades_placed, retries=5)
                        if not close_order_id:
                            print(f"Skipping new order for {symbol} due to failure to close existing position.")
                            continue
                        if open_orders.get(symbol):
                            await cancel_open_order(symbol, open_orders[symbol], retries=3)
                        open_orders[symbol] = None
                        last_order_types[symbol] = None

                    # Update signal
                    last_signals[symbol] = current_signal

                    if current_signal == 'long' and not test_completed[symbol]:
                        trades_placed += 1
                        # Place $15 long position
                        order_id = await place_market_buy_order(symbol, full_quantity, trades_placed, retries=3)
                        if order_id:
                            open_orders[symbol] = order_id
                            last_order_types[symbol] = 'BUY'
                            # Close $14 position
                            trades_placed += 1
                            close_order_id = await place_market_sell_order(symbol, close_quantity, trades_placed, retries=3)
                            if close_order_id:
                                print(f"Closed $14 of long position for {symbol}, leaving remaining position open")
                                # Wait 5 seconds and attempt to close remaining position
                                await asyncio.sleep(5)
                                trades_placed += 1
                                # Verify remaining position size
                                position_side, position_size = await check_position(symbol)
                                if position_side == 'long' and position_size > 0:
                                    remaining_order_id = await place_market_sell_order(symbol, position_size, trades_placed, retries=3)
                                    if remaining_order_id:
                                        print(f"Successfully closed remaining position for {symbol} with order {remaining_order_id}, Quantity: {position_size}")
                                        test_completed[symbol] = True  # Mark test as completed
                                    else:
                                        print(f"Failed to close remaining position for {symbol} after 3 attempts.")
                                        send_telegram_message(f"Failed to close remaining position for {symbol} after 3 attempts. Check if API supports small position closure.")
                                else:
                                    print(f"No remaining long position for {symbol} to close after 5 seconds.")
                                    test_completed[symbol] = True  # Mark test as completed
                            else:
                                print(f"Failed to close $14 of long position for {symbol} after 3 attempts.")
                            # Skip placing new position to focus on test
                            continue
                        else:
                            print(f"Failed to place new buy order for {symbol} after 3 attempts.")
                            continue
                    elif current_signal == 'short':
                        trades_placed += 1
                        # Place $15 short position
                        order_id = await place_market_sell_order(symbol, full_quantity, trades_placed, retries=3)
                        if order_id:
                            open_orders[symbol] = order_id
                            last_order_types[symbol] = 'SELL'
                            # Close $14 position
                            trades_placed += 1
                            close_order_id = await place_market_buy_order(symbol, close_quantity, trades_placed, retries=3)
                            if close_order_id:
                                print(f"Closed $14 of short position for {symbol}, leaving $1 open")
                            else:
                                print(f"Failed to close $14 of short position for {symbol} after 3 attempts.")
                        else:
                            print(f"Failed to place new sell order for {symbol} after 3 attempts.")
                else:
                    print(f"{symbol} Signal unchanged or no new signal, skipping order placement")

            print(f"\nCycle completed. Total trades placed: {trades_placed}")
            print(f"Processed {len(symbols)} pairs. Sleeping for 30 minutes...")
            await asyncio.sleep(1800)  # 30 minutes

        except Exception as e:
            print(f'An error occurred in cycle: {e}')
            await asyncio.sleep(60)  # 1 minute

# Run the trading strategy
async def main():
    if symbols:
        await ema_strategy()
    else:
        print("No symbols available to trade. Exiting...")

if __name__ == "__main__":
    asyncio.run(main())