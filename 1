import ccxt
import pandas as pd
import time
from config import COINEX_API_KEY, COINEX_API_SECRET, symbols, time_interval

# Create a CoinEx client
exchange = ccxt.coinex({
    'apiKey': COINEX_API_KEY,
    'secret': COINEX_API_SECRET,
    'options': {'defaultType': 'swap'},
    'enableRateLimit': True
})

# Define EMA strategy parameters
short_ema_period = 5
long_ema_period = 10

# Track the last order type and open orders for each symbol
last_order_types = {symbol: None for symbol in symbols}
open_orders = {symbol: None for symbol in symbols}

# Fixed quantity in USDT worth of contracts
fixed_quantity_usdt = 5

# Function to calculate EMA
def calculate_ema(df, period, column='close'):
    return df[column].ewm(span=period, adjust=False).mean()

# Function to fetch historical data with EMA calculation
def fetch_ohlcv(symbol, timeframe, limit):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['short_ema'] = calculate_ema(df, short_ema_period)
        df['long_ema'] = calculate_ema(df, long_ema_period)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"Error fetching OHLCV for {symbol}: {e}")
        return None

# Function to place a market buy order
def place_market_buy_order(symbol, quantity, order_num):
    try:
        order = exchange.create_market_buy_order(symbol, amount=quantity)
        print(f"Order #{order_num} - Market Buy Order placed for {symbol}: {order['id']}")
        return order['id']
    except Exception as e:
        print(f"Order #{order_num} - Error placing Market Buy Order for {symbol}: {e}")
        return None

# Function to place a market sell order
def place_market_sell_order(symbol, quantity, order_num):
    try:
        order = exchange.create_market_sell_order(symbol, amount=quantity)
        print(f"Order #{order_num} - Market Sell Order placed for {symbol}: {order['id']}")
        return order['id']
    except Exception as e:
        print(f"Order #{order_num} - Error placing Market Sell Order for {symbol}: {e}")
        return None

# Function to cancel an open order
def cancel_open_order(symbol, order_id):
    try:
        if order_id:
            exchange.cancel_order(order_id, symbol)
            print(f"Cancelled open order for {symbol}: {order_id}")
    except Exception as e:
        print(f"Error cancelling order for {symbol}: {e}")

# Main trading function with individual orders and debug
def ema_strategy():
    while True:
        try:
            trades_placed = 0

            for i, symbol in enumerate(symbols, 1):
                print(f"\nProcessing pair #{i}/{len(symbols)}: {symbol}")
                historical_data = fetch_ohlcv(symbol, time_interval, 100)

                if historical_data is None or len(historical_data) < long_ema_period:
                    print(f"Not enough data for {symbol}. Skipping...")
                    continue

                latest_candle = exchange.fetch_ticker(symbol)
                if 'close' not in latest_candle:
                    print(f"Error: 'close' not found in latest_candle for {symbol}")
                    continue
                
                latest_close = float(latest_candle['close'])
                if latest_close is None:
                    print(f"Error: latest_close is None for {symbol}")
                    continue

                quantity = fixed_quantity_usdt / latest_close
                print(f"Symbol: {symbol}, Latest Close: {latest_close}, Quantity: {quantity}")

                if open_orders[symbol]:
                    cancel_open_order(symbol, open_orders[symbol])
                    open_orders[symbol] = None

                if (historical_data['short_ema'].iloc[-1] > historical_data['long_ema'].iloc[-1] and
                    last_order_types[symbol] != 'BUY'):
                    print(f'{symbol} Buy Signal (Crossover)')
                    trades_placed += 1
                    order_id = place_market_buy_order(symbol, quantity, trades_placed)
                    if order_id:
                        open_orders[symbol] = order_id
                        last_order_types[symbol] = 'BUY'
                    else:
                        print(f"Failed to place buy order for {symbol}. Continuing...")
                
                elif (historical_data['short_ema'].iloc[-1] < historical_data['long_ema'].iloc[-1] and
                      last_order_types[symbol] != 'SELL'):
                    print(f'{symbol} Sell Signal (Crossunder)')
                    trades_placed += 1
                    order_id = place_market_sell_order(symbol, quantity, trades_placed)
                    if order_id:
                        open_orders[symbol] = order_id
                        last_order_types[symbol] = 'SELL'
                    else:
                        print(f"Failed to place sell order for {symbol}. Continuing...")

            print(f"\nCycle completed. Total trades placed: {trades_placed}")
            print(f"Processed {len(symbols)} pairs. Sleeping for 5 minutes...")
            time.sleep(300)
            
        except Exception as e:
            print(f'An error occurred in cycle: {e}')
            time.sleep(60)

# Run the trading strategy
ema_strategy()